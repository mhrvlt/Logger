package main;

import constants.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import utils.ServerManager;
import utils.SftpUtility;

/**
 * Servlet implementation class LoggerSevlet
 */
@WebServlet("/LoggerSevlet")
public class LoggerSevlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public LoggerSevlet() {
		super();

	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//Retrieving the Query Data.
		String subID = request.getParameter("id");
		String env = request.getParameter("env");

		System.out.println("Submission ID : " + subID);
		System.out.println("Environment : " + env);

		//persisting the submission id and env name in session variables.
		HttpSession session = request.getSession();
		session.setAttribute("id", subID);
		session.setAttribute("env", env);

		//For remote env
		if(!env.equalsIgnoreCase("ARPA_LOCAL") && !env.equalsIgnoreCase("MRPA_LOCAL")){

			//Initialize server information.
			ServerManager server = new ServerManager();
			server.setEnvironmentDetails(env);

			//Remote Connect and copying the server log file to local file.
			remoteOps(server);
		}

		//editing the local log file to get the quote logs, and saving it in other file.
		File f = editQuoteLog(subID, env);

		//printing the quote logs.
		PrintWriter out = response.getWriter();
		if(f.exists() && f.length()>0){
			Scanner scanner = new Scanner(f);
			while(scanner.hasNextLine()){
				out.println(scanner.nextLine());
			}
		}else{
			out.println("Quote not found. Please try a recent quote or check the environment name.");
		}

		System.out.println("Log for Quote No. " + subID + " is ready!");

	}

	public void remoteOps(ServerManager server){

		//connecting to the remote machine and copying the log file.
		String sftpHost = server.getSERVERNAME();
		int sftpPort = server.getPORT();
		String sftpUser = server.getUSERNAME();
		String sftpPassword = server.getPASSWORD();
		String sftpDir = server.getREMOTE_DIR();
		SftpUtility sftp = new SftpUtility(sftpHost, sftpPort, sftpUser, sftpPassword, sftpDir);
		sftp.copyFileToDir(LoggerConstants.LOCAL_FULL_LOG_FILE_PATH, sftpDir , LoggerConstants.SERVER_FILE_NAME);


	}

	@SuppressWarnings("finally")
	public File editQuoteLog(String subID, String env){

		File file;

		//making exception for local server log files.
		if(env.equalsIgnoreCase("MRPA_LOCAL")){
			file  = new File (LoggerConstants.MY_LOCAL_MRPA_LOG_FILE_PATH);
		}else if(env.equalsIgnoreCase("ARPA_LOCAL")){
			file  = new File (LoggerConstants.MY_LOCAL_ARPA_LOG_FILE_PATH);
		}else{
			file = new File (LoggerConstants.LOCAL_FULL_LOG_FILE_PATH);
		}

		File f = new File (LoggerConstants.LOCAL_QUOTE_LOG_FILE_PATH);
		if(f.exists())
			f.delete();

		try{

			FileOutputStream os = new FileOutputStream(f);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(os));

			int scannerLineNum = 0;
			int quoteStartLineNum = 0;
			int quoteEndLineNum = 0;
			boolean flag = false;

			System.out.println("Scanning the Log file for required quote.");

			if(file.exists() && file.length()>0){
				Scanner scanner = new Scanner(file);
				while(scanner.hasNextLine()){
					String line = scanner.nextLine();
					scannerLineNum++;
					if(!flag){
						if(line.indexOf("End of process()") >= 0)
							quoteStartLineNum = scannerLineNum;
					}
					if(line.indexOf(subID) >= 0)
						flag = true;
					if(flag){
						if(line.indexOf("End of process()") >= 0){
							flag = false;
							quoteEndLineNum = scannerLineNum;
							break;
						}
					}
				}
			}

			scannerLineNum = 0;
			System.out.println("Quote starts from line : " + quoteStartLineNum);
			System.out.println("Quote ends on line : " + quoteEndLineNum);

			if(file.exists() && file.length()>0){
				Scanner scanner = new Scanner(file);
				while(scanner.hasNextLine()){
					String line = scanner.nextLine();
					scannerLineNum++;
					if((scannerLineNum > quoteStartLineNum) && (scannerLineNum < quoteEndLineNum)){
						bw.write(line);
						bw.newLine();
					}
				}

				bw.close();
			}

			System.out.println("Quote Log editing done. ");

		}catch(Exception ex){

			ex.printStackTrace();
		}finally{
			return f;
		}

	}


}
